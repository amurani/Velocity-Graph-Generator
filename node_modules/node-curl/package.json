{
  "name": "node-curl",
  "version": "0.3.3",
  "author": {
    "name": "Jiang Miao",
    "email": "jiangfriend@gmail.com"
  },
  "description": "node wrapper for multi curl, fully implemented.",
  "keywords": [
    "node-curl",
    "curl",
    "multi-curl",
    "mcurl"
  ],
  "homepage": "http://github.com/jiangmiao/node-curl",
  "repository": {
    "type": "git",
    "url": "git://github.com/jiangmiao/node-curl.git"
  },
  "main": "./lib",
  "scripts": {
    "install": "sh src/generate_curl_options_list.sh && (node-gyp rebuild || node-waf configure build)"
  },
  "engines": {
    "node": ">= 0.6.0"
  },
  "readme": "node-curl [![Build Status](https://secure.travis-ci.org/jiangmiao/node-curl.png?branch=master)](http://travis-ci.org/jiangmiao/node-curl)\n=========\n\nnode cURL wrapper, support all options and infos.\n\nQuick Start\n-----------\n\n* quick start\n\n        curl = require('node-curl');\n        curl('www.google.com', function(err) {\n          console.info(this.status);\n          console.info('-----');\n          console.info(this.body);\n          console.info('-----');\n          console.info(this.info('SIZE_DOWNLOAD'));\n        });\n\n* with options\n\n        curl = require('node-curl')\n        curl('www.google.com', {VERBOSE: 1, RAW: 1}, function(err) {\n          console.info(this);\n        });\n\n* run the example/test.js\n\n        node examples/test.js\n\nUsage\n-----\n\n* curl\n\n        curl(url, [options = {}], callback)\n        callback includes 1 parameters (error)\n        result is stored in curl\n\n* Retrieve Data from curl\n\n        members:\n          status           - Http Response code\n          body             - Http body\n          header           - Http header\n\n          url              - the url set by curl(...)\n          options          - the options set by curl(...)\n          defaultOptions   - the defaultOptions\n          effectiveOptions - the options curl used\n\n        methods:\n          info(name) - Get information of result, see 'info' section\n\n        REMARK:\n            If the http is redirected, then header will contain at least 2 http headers.\n\n\n* Curl Control\n\n        members\n            debug (default: false)\n                - logging node-curl debug info\n\n        methods:\n            void reset()\n                - reset curl and set options to default options\n\n            void setDefaultOptions(options, reset = true)\n                - set default options\n\n            curl create(defaultOptions)\n                - create a new curl with default options\n\nOptions\n-------\n* Any cURL Easy Options\n\n        eg: CURLOPT_VERBOSE will be VERBOSE, CURLOPT_HEADER will be HEADER\n\n        Full list at http://curl.haxx.se/libcurl/c/curl_easy_setopt.html\n\n* node-curl Extra Options\n\n        RAW   - Returns Buffer instead of String in result.body\n        DEBUG - Replace curl.debug\n\n* About slist parameters\n\n        node-curl support slist which map to Javascript Array\n\n        eg:\n            HTTPHEADER: ['FOO', 'BAR']\n            HTTPHEADER: 'FOO'\n\n            any non-array parameter will convert to [ parameter.toString() ]\n\nInfos\n-----\n* Any cURL Info options\n\n        eg: CURLINFO_EFFECTIVE_URL will be EFFETCTIVE_URL\n\n        full list at http://curl.haxx.se/libcurl/c/curl_easy_getinfo.html\n\n\n* About slist\n\n          slist will be returns in Array\n          eg: CURLINFO_COOKIELIST\n\nMultiPart Upload\n----------------\nUse MULTIPART option\n\nThere are 4 options in MULTIPART, `name`, `file`, `type`, `contents`\n\n```javascript\ncurl('127.0.0.1/upload.php', {\n    MULTIPART: [\n        {name: 'file', file: '/file/path', type: 'text/html'},\n        {name: 'sumbit', contents: 'send'}\n    ]\n}, function(e) {\n    console.log(e);\n    console.log(this.body);\n    this.close()\n});\n```\n\nLow Level Curl Usage\n--------------------\n\nrequire 'node-curl/lib/Curl'\n\nMethods:\n\n    Curl setopt(optionName, optionValue)\n    Curl perform()\n    Curl on(eventType, callback)\n    Mixed getinfo(infoName)\n\nEvents:\n\n    'data', function(Buffer chunk) {}\n    'header', function(Buffer chunk) {}\n    'error', function(Error error) {}\n    'end', function() {}\n\nExample: examples/low-level.js\n\n    var Curl = require('node-curl/lib/Curl')\n\n    var p = console.log;\n    var url = process.argv[2];\n\n    var curl = new Curl();\n\n    if (!url)\n        url = 'www.yahoo.com';\n\n    curl.setopt('URL', url);\n    curl.setopt('CONNECTTIMEOUT', 2);\n\n    // on 'data' must be returns chunk.length, or means interrupt the transfer\n    curl.on('data', function(chunk) {\n        p(\"receive \" + chunk.length);\n        return chunk.length;\n    });\n\n    curl.on('header', function(chunk) {\n        p(\"receive header \" + chunk.length);\n        return chunk.length;\n    })\n\n    // curl.close() should be called in event 'error' and 'end' if the curl won't use any more.\n    // or the resource will not release until V8 garbage mark sweep.\n    curl.on('error', function(e) {\n        p(\"error: \" + e.message);\n        curl.close();\n    });\n\n\n    curl.on('end', function() {\n        p('code: ' + curl.getinfo('RESPONSE_CODE'));\n        p('done.');\n        curl.close();\n    });\n\n    curl.perform();\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jiangmiao/node-curl/issues"
  },
  "_id": "node-curl@0.3.3",
  "dist": {
    "shasum": "71274370774c2298b860307a9e45877701638735"
  },
  "_from": "node-curl@",
  "_resolved": "https://registry.npmjs.org/node-curl/-/node-curl-0.3.3.tgz"
}
